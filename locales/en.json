{
    "global": {
        "addToUrl": "en/",
        "projectsDir": "projects/",
        "frIsActive": "",
        "enIsActive": "active",
        "french": "French",
        "english": "English"
    },
    "headers" : {
        "lang": "en"
    },
    "home": {
        "title": "Robin Bécherraz - Web developer & Media engineer",
        "metaDesc": "I'm a young media engineer, passionate about web and technology. Visit my portfolio to know more about me and my work.",
        "portraitAlt": "Robin's portrait",
        "catchPhrase1": "I'm a young media engineer, passionate about web and technology.",
        "catchPhrase2": "My background as a computer scientist taught me a lot of technical knowledges and brought me some experience in the corporate world. But I wanted to put my terminal aside for a moment to learn beyond pure technic. This led me to become a web developer with a large range of side skills, like UX, communication, marketing, content creation and more.",
        "aboutMe": "About me",
        "iLiveIn": "I live in",
        "whereILive": "Romandy Switzerland",
        "wasBornIn": "I was born in",
        "iSpeak": "I speak",
        "whatISpeak": "French (mother tongue) English (speakink/writing B2, I understand C1)",
        "education": "Education",
        "educationContent": "IT scientist CFC & media engineering bachelor's degree",
        "myFavorites": "My favorite ...",
        "myFavoritesContent": "Movie: Léon (1994), TV show: Mr Robot, Band: Moon Hooch, Video game: Skyrim, Sport: bloc climbing, Colour: #AE009B",
        "skills": "Skills",
        "other": "Other",
        "skillsContent": "Digital<span class='nbsp'>&nbsp;</span>marketing UX/UI Content<span class='nbsp'>&nbsp;</span>creation<span class='nbsp'>&nbsp;</span>(Adobe<span class='nbsp'>&nbsp;</span>suite) Project<span class='nbsp'>&nbsp;</span>management",
        "thumbAlt": "Project's thumbnail",
        "unavailable": "unavailable",
        "visit": "visit"
    },
    "projects": {
        "backLabel": "&lt; back to portfolio",
        "builtIn": "Built in",
        "addToMetaTitle": "a project by Robin Bécherraz",
        "titleHeader": "My projects",
        "RoomForImprovement": "Room for improvement",
        "context": "Context",
        "func": "Functionnalities",
        "goal": "Goal",
        "problemsSolutions": "Problems & Solutions"
    },
    "mooderize": {
        "filename": "mooderize",
        "enFilename": "mooderize",
        "frFilename": "mooderize",
        "title": "Mooderize",
        "titleTag": "My projects - Mooderize",
        "desc": "Audio effects app",
        "metaDesc": "A single page app allowing you to apply sound effects to audio file using the Web Audio API and a node.js API.",
        "sentence1": "Mooderize is a single page app which allows you to apply sound effects to an audio file. The audio is processed by the <a href=\"https://developer.mozilla.org/fr/docs/Web/API/Web_Audio_API\" target=\"blank\">Web Audio API</a>. The website also contains a feature allowing users to asynchronously load a YouTube video. For this feature, I made a small API using Express.js.",
        "goal1": "I wanted to find a way to process audio on a website. I wanted the user to be able to upload a song, choose a pre-maid audio effect, apply it to the song and then download the modified song. I also wanted the website to be a PWA.",
        "ps1": "My main problem was to find a library who offered, at least, basic EQ and reverb effects. I found out that there are only few reliable options. I tried <a href=\"https://github.com/belangeo/pyo\" target=\"blank\">Python PYO</a>, which was a bit too complicated, I also tried <a href=\"https://github.com/carlthome/python-audio-effects\" target=\"blank\">python-audio-effects</a>, but I honestly don't remember why I didn't use it. But my final choice went to the JavaScript <a href=\"https://developer.mozilla.org/fr/docs/Web/API/Web_Audio_API\">Web Audio API</a>. This solution has the particularity of being full frontend.",
        "ps2": "The second problem, which was linked to the first one, was that the Web Audio API doesn't provide the possibility to create a file from the modified song. You can stream the song only. The only solution I found is to use the <a href=\"https://github.com/mattdiamond/Recorderjs\" target=\"blank\">Recorderjs</a> library. It's unfortunately not maintained anymore, but I know that a lot of websites are using it and it's a small module so I went with it.",
        "ps3": "The third problem was to use a YouTube link as an audio source. YouTube is not helpful on this, as you can't use the audio from an embed YouTube video. I didn't find any online API to retrieve an audio file from a YouTube link, but I found multiple python and Node modules on GitHub and went for the <a href=\"https://github.com/fent/node-ytdl\" target=\"blank\">node-ytdl</a> module. I then built a very simple API using Express.js, just to retrieve the audio file using an ajax call.",
        "impr1": "I think that using a backend library for the audio processing could be a good idea. Because the audio processing is very slow on mobile using Web Audio API. The UI and the visual aspect could be improved a lot. Also, I wanted to try to build the entire app using vanilla JavaScript to know if jQuery was still necessary in 2020. And according to me, it is. And more than that, a library like Redux would certainly help a lot to handle the navigation, which is a bit chaotic in JS. This app was kind of an experiment, so the overall code is not very clean."
    },
    "gryonbiketest": {
        "filename": "gryonbiketest",
        "enFilename": "gryonbiketest",
        "frFilename": "gryonbiketest",
        "title": "Gryon Bike Test",
        "titleTag": "My projects - Gryon Bike Test",
        "desc": "App for a bike test event",
        "metaDesc": "A platform for a bike test event. A Bike Advisor for the visitors and a management platform for the staff. Built with Laravel by 3 developers in 1 month",
        "sentence1": "<a href=\"https://www.bikegryon.ch/\" target=\"blank\">Gryon Bike Test</a> is a three days event where people can test a multitude of bikes brought by different bikes sellers. I leaded a three developers team during a one month school project which aim was to build a MVP application for that event. This app is a management interface for the event staff, and it's also a kind of \"<s>Trip</s> Bike advisor\" for the event visitors",
        "sentence2": "You can test the app with the following credentials:",
        "sentence3": "The password is \"password\" for all of them",
        "cont1": "This project was the year-end project of my bachelor 2nd year. The goal was to build, in 20 days, a functionnable MVP for the <a href=\"https://www.bikegryon.ch/\" target=\"blank\">Gryon Bike Test</a>, allowing their staff to manage the visitors and the bikes loaning.",
        "cont2": "We were a team of five people. Two of us worked on the visual / UX part, One was mainly working on the HTML / CSS, and the last person and myself worked on the backend. I was leading our three people developement team.",
        "cont3": "This project was not only a coding project, we also did all the ideation to determine our concept and our functionnalities.",
        "func0": "There are the functionnalities we implemented:",
        "func1": "Functionnalities for the staff",
        "func11": "Management of the application's users and their rights",
        "func2": "Functionnalities for the bikes sellers",
        "func21": "Manage their bikes catalogue",
        "func22": "Manage the bikes loaning (Who borrows which bike and when)",
        "func3": "Functionnalities for the visitors",
        "func31": "Buy a ticket (The payment part is fake, so it's more of a registration) / Login",
        "func32": "See all available bikes at the event with their ratings and comments",
        "func33": "Rate the bike they have tested on mutliple criterias",
        "impr1": "The app is a MVP. So a lot of functionnalities could be added. I'm pretty happy with the code, but some times we learnt something during the development and we didn't have time to refactor all the code. The database modeling could surely be improved as well. Also, our CSS skills were modest at that time, so the responsive and cross-browser CSS could be improved."
    },
    "theapologist": {
        "filename": "theapologist",
        "enFilename": "theapologist",
        "frFilename": "theapologist",
        "title": "The Apologist",
        "titleTag": "My projects - The Apologist",
        "desc": "Cinema / Cultural blog",
        "metaDesc": "Redesign of The Apologist website.",
        "sentence1": "I was hired to change the WordPress template of a website, which was already in production. It contained arround 500 articles. I had to make some SQL requests in the WordPress' database to adapt the articles' content to the way the new template works."
    },
    "automaton": {
        "filename": "cellularautomaton",
        "enFilename": "cellularautomaton",
        "frFilename": "automatecellulaire",
        "title": "Cellular Automaton",
        "titleTag": "My projects - Cellular Automaton",
        "desc": "Configurable life like automaton",
        "metaDesc": "A life like automaton which you can change the birth and surviving rules made in JavaScript and HTML Canvas.",
        "sentence1": "This is an exercice we did at school, which I went further into. It's a <a href='https://en.wikipedia.org/wiki/Cellular_automaton' target='blank'>Cellular automaton</a> which you can change the birth and surviving rules.",
        "hint": "hint:",
        "hint1": "Press \"P\" to pause and hold \"A\" to set the initial birth on 0.",
        "hint2": "Change the rules to B: 1,3 and S: 1,3",
        "hint3": "Press \"R\" to reset the grid, click on a cell and press \"P\" to resume the automaton.",
        "hint4": "Enjoy the living mandala!"
    },
    "swisssolarboat": {
        "filename": "swisssolarboat",
        "enFilename": "swisssolarboat",
        "frFilename": "swisssolarboat",
        "title": "Swiss Solar Boat",
        "titleTag": "My projects - Swiss Solar Boat",
        "desc": "Association website",
        "metaDesc": "A WordPress website for the EPFL's association Swiss Solar Boat.",
        "sentence1": "I was a member of the communication team for the EPFL's Swiss Solar Boat Association. An other member and I worked on the website. It has been built with WordPress and Divi builder, except for the <a href=\"https://swisssolarboat.ch/en/team-en/\" target=\"blank\">Team</a> page.",
        "sentence2": "We used WordPress because we didn't have the skills to develop it from scratch. But I don't particularly like WordPress anymore so I would develop it by hand if I had to re-do it"
    },
    "myportfolio": {
        "filename": "myportfolio",
        "enFilename": "myportfolio",
        "frFilename": "monportfolio",
        "title": "My Portfolio",
        "titleTag": "My projects - My portfolio",
        "desc": "Automated and evolutive static website",
        "metaDesc": "An automated and evolutive static website using Handlebars templating compiled at Webpack build.",
        "sentence1": "For that project, I created a frontend development environment setup that you can find <a href=\"https://github.com/robiiiiiiiiiiiin/HandleBabelSassPack\" target=\"blank\">here</a>.",
        "sentence2": "I used <a href=\"https://handlebarsjs.com/\" target=\"blank\">Handlebars</a> and <a href=\"https://github.com/sagold/handlebars-webpack-plugin\" target=\"blank\">handlebars-webpack-plugin</a> to automate the generation of the projects' thumbnails and the projets pages' header from a json file.",
        "cont1": "I hadn't much time to build this website and I wanted it to be evolutive; I wanted to be able to add my future projects easily. I had already used Handlebars templating in an SPA project, where templates were dinamically generated in JS. But here, I wanted to use it for development and serve a static page to the client.",
        "cont2": "I found the <a href=\"https://github.com/sagold/handlebars-webpack-plugin\" target=\"blank\">handlebars-webpack-plugin</a>, which was perfectly suited for my needs. I added it to my usual Webpack config. I also added Sass, which I had never used but fell in &lt;3 with. With that config, I created a frontend development environment setup that you can find <a href=\"https://github.com/robiiiiiiiiiiiin/HandleBabelSassPack\" target=\"blank\">here</a>. I will probably re-use that setup for future projects.",
        "impr1": "I should add a tool to automate image optimisation, like converting them to .webp and serving multiple resolutions."
    },
    "lechodubois": {
        "filename": "lechodubois",
        "enFilename": "lechodubois",
        "frFilename": "lechodubois",
        "title": "L'Echo du Bois",
        "titleTag": "My Projects - L'Echo du Bois",
        "desc": "Responsive and lightweight static website",
        "metaDesc": "Responsive and lightweight static website using CSS Grid. The images are optimized with Sharp. SEO optimized",
        "sentence1": "I designed and built this website for a woodworker working around Bulle. A particular attention has been paid on responsive design and SEO. The images are optimized using a <a href=\"https://www.npmjs.com/package/sharp\" target=\"blank\">Sharp</a> script who automatically creates multiple image sizes and save them in both .jpg and .webm."
    }
}